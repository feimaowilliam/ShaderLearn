// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;
  out vec4 v_time;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    v_time = cc_time;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  #include <cc-global>

  in vec4 v_color;
  in vec4 v_time;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o); // 透明度为0的会被丢弃，透明
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    vec2 distance_vec = center - v_uv0;
    distance_vec = distance_vec * vec2(canvas_size.x / canvas_size.y, 1.0);
    float distanceF = sqrt(distance_vec.x * distance_vec.x + distance_vec.y * distance_vec.y);

    float sin_factor = sin(distanceF * 100 + v_time.x) * 0.05;
    float discard_factor = clamp(wave_radius - abs(wave_offset - distanceF), 0.0, 1.0);

    // 计算总的uv的偏移值
    vec2 offset = normalize(distance_vec) * sin_factor * discard_factor;
    vec2 uv = offset + v_uv0;

    gl_FragColor = texture(texture, uv);

    // gl_FragColor = o;
    // gl_FragColor = vec4(1, 0, 0, o.a);
  }
}%
